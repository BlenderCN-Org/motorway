MOTORWAY (SHITTY) TODO
----------
Stuff todo for the project

[Editor]
    <Road Network Editor>
        (Get Terrain Working first)
        > TopDown View ('Map' like view)
        > Road Generation (Bezier Curve and shiet)
        > 'Road Profile' (material, AI node, etc.)
        > Procedural road generation (anisotropic path finding seems to give nice result; see Inria paper and Ghost Recon presentation)
    > Better mouse picking (color buffer instead of bounding geometry?)
    <Material Editor Unfuckery>
        > Fix layer blending for edge cases (see bug reports)
        > Proper Material compilation (compute shader permutations; compute antialiased normals/roughness; etc.)
        > Allow custom sampler parameters (tex coordinates addressing; custom blend state)
        > Auto save material (dont make manual save mandatory on scene asset save)
    > Fix scene deletion command issue (figure out how to copy a renderable entity and hide it until the deleted cmd is reverted)
    
[Engine]
    > Implement proper memory allocators (pool/heap/stack/fast hashmap/etc.)
    <Terrain Rendering/Physics>
        > Terrain Material Blending (depth based)
        > Biome Presets / Define
        > Terrain painting (using compute shader? see Ghost Recon gdc pdf)
        > GeoClipping / or something even more basic for LODing
        > Terrain Tile streaming 
        > Terrain Hiearchal Structure (quadtree?)
        > Heightmap collision (built in Bullet's, just need to read the doc)
    > Grass rendering (see Boulanger paper)
    > Implement Software Occlusion Culling (see Intel mess and whitepapers)
    > Finish Vulkan port
    > Decals Support
    > Jobify CPU work
        | Resources:
        | http://advances.realtimerendering.com/destiny/gdc_2015/Tatarchuk_GDC_2015__Destiny_Renderer_web.pdf
        | http://twvideo01.ubm-us.net/o1/vault/gdc2015/presentations/Gyrling_Christian_Parallelizing_The_Naughty.pdf
        | http://adruab.net/wp-images/GDC14_infamous_second_son_engine_postmortem.pdf      
    > Implement Instanciation (should help for Vulkan port)
    > Better physics
	> Data Oriented Design (GameLogic/Framework wise)
    > Vectorify draw commands building as much as possible (see profiler output on stress test)
	> Punctual/Spot light shadow map support
    > Automatic exposure override (to properly handle night time)
    
[Client]
    > Implement Client to Server connection (see old code)
    > Implement Client chat (server sided)
    > Move Physics to server side (use Client prediction only?)
    
[Assets]
    > Vehicle custom format (graphics/physics/audio properties in a txt file)
    > Create assets (world/vehicle)
    > Non-ugly icons?
    
----------
DONE

[Editor]    
	<Material Editor Unfuckery>
        > Fix serialization/deserialization
        > Reimplement parallax occlusion mapping (displacement map sampling/blend)
        > Per SubMesh Material Instance (allow local override; dont apply changes to instancied material)		
        > Add Normal Map Strength parameter
        > Fix Depth shaders (blend layers alphas)
        > Reimplement refraction in shader (dynamic/resolved branching)
    > Split Client and Editor contexts
    > Wireframe primitives for renderable entities (light sources, probes, etc.)
    
[Engine]
    > Fix AutoExposure glitches (tip: do calibration with EV100 rule)
    <Specular AntiAliasing>
        > Finalize VMF Compute shader
        > Editor Panel (material editor only or dedicated one?)
        > How should it be saved? Draft idea: compute both rt at frame N, save to disk at frame N+1 (basically wait for 
          the previous cmdlist to be finished)
    <Terrain Rendering/Physics>
        > Texture Splatting (3 levels should be enough)
    > SSAA Implementation
    
[Client]
